{{- if  .Values.apiserver.enabled }}
{{- $externalFeature := .Values.apiserver.externalFeature -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ template "modelz.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    component: apiserver
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
  name: apiserver
  namespace: {{ .Release.Namespace | quote }}
spec:
  replicas: {{ .Values.apiserver.replicas }}
  selector:
    matchLabels:
      app: apiserver
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "false"
      labels:
        app: apiserver
    spec:
      priorityClassName: {{ .Values.priorityClass.modelz }}
      imagePullSecrets:
        - name: {{ .Values.imagePullSecrets }}
      {{- if .Values.migration.enabled }}
      initContainers:
      - name: migrate
        image: {{ .Values.migration.image }}
        imagePullPolicy: Always
        args: ["supabase", "db", "push", "--db-url", "$(ENVD_DB_URL)"]
        env:
          - name: ENVD_DB_URL
            value: {{ .Values.apiserver.dbUrl | quote }}
      {{- end }}
      containers:
      - name:  apiserver
        resources:
          {{- .Values.apiserver.resources | toYaml | nindent 12 }}
        image: {{ .Values.apiserver.image }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        command:
          - "/usr/bin/apiserver"
          - "--debug"
          {{- if .Values.apiserver.noAuth }}
          - "--no-auth"
          {{- end }}
          - "--gateway-host"
          - "http://gateway.{{ .Release.Namespace }}:8080"
          - "--db-url"
          - {{ .Values.apiserver.dbUrl | quote }}
          - "--prometheus-host"
          - "prometheus.{{ .Release.Namespace }}"
          - "--prometheus-port"
          - "9090"
          - "--metering-api-key"
          - {{ .Values.apiserver.meteringApiKey | quote }}
          - "--metering-price-plan-id"
          - {{ .Values.apiserver.meteringPricePlanID | quote }}
          - "--credit-on-signup"
          - {{ .Values.apiserver.creditOnSignup | quote }}
          - "--credit-on-payment-method"
          - {{ .Values.apiserver.creditOnPaymentMethod | quote }}
          - "--jwt-secret"
          - {{ .Values.apiserver.jwtSecret | quote }}
          - "--stripe-webhook-secret"
          - {{ .Values.apiserver.stripeWebhookSecret | quote }}
          - "--stripe-api-key"
          - {{ .Values.apiserver.stripeAPIKey | quote }}
          - "--domain"
          - {{ .Values.cloudDomain | quote }}
          - "--sendgrid-api-key"
          - {{ .Values.email.sendgridAPIKey | quote }}
          - "--sendgrid-template-reach-spend-limit"
          - {{ .Values.email.sendgridTemplateReachSpendLimit | quote }}
          - "--sendgrid-template-team-invite"
          - {{ .Values.email.sendgridTemplateTeamInvite | quote }}
          - "--mixpanel-api-key"
          - {{ .Values.apiserver.mixpanelAPIKey | quote }}
          {{- if .Values.apiserver.dueCheckerWhiteList }}
          - "--account-white-list"
          - {{ .Values.apiserver.dueCheckerWhiteList | quote }}
          {{- end }}
          {{- if $externalFeature.enabled }}
          - "--enable-external-feature"
          {{- end }}
          {{- if and $externalFeature.enabled $externalFeature.unifiedAPIKey }}
          - "--unified-api-key"
          - {{ $externalFeature.unifiedAPIKey | quote }}
          {{- end }}
          - "--upstream-timeout"
          - {{ .Values.apiserver.upstreamTimeout | quote }}
          - "--artifact-image-registry"
          - {{ .Values.apiserver.artifactImageRegistry | quote }}
          {{- if .Values.build.gcp.enabled }}
          - "--enable-gcr-build"
          - "--gcr-json-key-path"
          - "/tmp/gcr-json-key.json"
          {{- end }}
        volumeMounts:
        {{- if .Values.build.gcp.enabled }}
        - name: gcr-json-key
          mountPath: /tmp/gcr-json-key.json
          subPath: gcr-json-key.json
        {{- end }}
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        livenessProbe:
          {{- if $.Values.apiserver.livenessProbe }}
          initialDelaySeconds: {{ $.Values.apiserver.livenessProbe.initialDelaySeconds | default 0 }}
          periodSeconds: {{ $.Values.apiserver.livenessProbe.periodSeconds | default 10 }}
          timeoutSeconds: {{ $.Values.apiserver.livenessProbe.timeoutSeconds | default 5 }}
          failureThreshold: {{ $.Values.apiserver.livenessProbe.failureThreshold | default 3 }}
          successThreshold: {{ $.Values.apiserver.livenessProbe.successThreshold | default 1 }}
          {{- end }}
          httpGet:
            path: /ping
            port: 8080
        readinessProbe:
          {{- if $.Values.apiserver.readinessProbe }}
          initialDelaySeconds: {{ $.Values.apiserver.readinessProbe.initialDelaySeconds | default 0 }}
          periodSeconds: {{ $.Values.apiserver.readinessProbe.periodSeconds | default 10 }}
          timeoutSeconds: {{ $.Values.apiserver.readinessProbe.timeoutSeconds | default 5 }}
          failureThreshold: {{ $.Values.apiserver.readinessProbe.failureThreshold | default 3 }}
          successThreshold: {{ $.Values.apiserver.readinessProbe.successThreshold | default 1 }}
          {{- end }}
          httpGet:
            path: /ping
            port: 8080
        env:
      volumes:
      {{- if .Values.build.gcp.enabled }}
      - name: gcr-json-key
        configMap:
          name: gcr-json-key
      {{- end }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
{{- end }}
